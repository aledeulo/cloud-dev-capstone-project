version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
  aws-cli: circleci/aws-cli@3.1

node_docker_image: &node_docker_image
  docker:
    - image: cimg/node:12.16
      user: root

python_cluster_docker_image: &python_cluster_docker_image
  docker:
    - image: cimg/python:3.10

commands:
  install_aws_cli:
    description: Configure aws cli to deploy resources
    steps:
      - run:
          name: install aws cli
          command: pip install awscli
  
  destroy-serverless-deployment:
    description: Destroy back-end cloudformation stacks given a workflow ID.    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
               aws s3 rm s3://my-bucket-todo-images-dev --recursive  --profile udacity-serverless
               aws cloudformation delete-stack --stack-name cloud-backend-app

jobs:
  build-backend:
    <<: *node_docker_image
    steps:
      - checkout
      - restore_cache:
          key: backend-build-{{ checksum "./backend/package.json" }}
      - run:
          name: Build back-end
          command: |
            cd ./backend && npm install
      - save_cache:
          paths: 
            - ./node_modules
          key: backend-build-{{ checksum "./backend/package.json" }}

  build-client:
    <<: *node_docker_image
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./client/package.json" }}
      - run:
          name: Build front-end
          command: |
            cd ./client && npm install
      - save_cache:
          paths: 
            - ./node_modules
          key: frontend-build-{{ checksum "./client/package.json" }}

  build-client-image:
    environment:
      IMAGE_NAME: ${DOCKER_USER}/client-app
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t $IMAGE_NAME:latest .

  publish-client-image:
    environment:
      IMAGE_NAME: client-app
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - setup_remote_docker
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
            docker push $IMAGE_NAME:latest
  
  deploy-serverless-backend:
    <<: *node_docker_image
    steps:
      - checkout
      - restore_cache:
          key: backend-build-{{ checksum "./backend/package.json" }}
      - run:
          name: Install serverless
          command: npm install -g serverless@2.21.1      
      - run:
          name: Update env vars in serverless.yml
          command: |
            cd ./backend &&\
            cat serverless_temp.yml |\
            sed "s|ENV_NAME|${ENV}|\
            g;s|AWS_REGION|${AWS_REGION}|g" > serverless.yml &&\
            cat serverless.yml
      - run:
          name: Install serverless plugins
          command: |
            cd ./backend &&\
            npm install serverless-webpack &&\
            npm install serverless-aws-documentation &&\
            npm install serverless-iam-roles-per-function &&\
            npm install serverless-plugin-tracing &&\
            npm install serverless-reqvalidator-plugin
      - run: 
          name: Configure serverless 
          command: |
            cd ./backend &&\
            sls config credentials --provider aws --key ${AWS_ACCESS_KEY_ID} --secret ${AWS_SECRET_KEY_VALUE}
      - run:
          name: Deploy backend
          command: cd ./backend && serverless deploy --aws-region ${AWS_REGION}

  create-aws-eks:
      <<: *python_cluster_docker_image
      steps:
        - checkout
        - install_aws_cli
        - run:
            name: check if the cluster exist
            command: |
              export VALIDATE=$(aws eks describe-cluster --name ${ENV}-cluster --query 'cluster.name')
              echo "$VALIDATE" > ~/validate
              if cat ~/validate | grep "${ENV}-cluster"
              then
                  echo "Cluster ${ENV}-cluster already exist. Skipping job"
                  circleci-agent step halt
                  exit 0
              else
                  echo "Attempting to create the cluster $ENV-cluster"
              fi
        - aws-eks/create-cluster:
            cluster-name: ${ENV}-cluster 
            aws-region: ${AWS_REGION}
            nodegroup-name: ${ENV}-workers
            node-type: t3.medium
            nodes-min: 1
            nodes-max: 2
      


workflows:
  deployment-workflow:
    jobs:
      - create-aws-eks:
          filters:
            branches:
              only: [main, dev]
      - build-backend:
          filters:
            branches:
              only: [main, dev]
      - deploy-serverless-backend:
          requires: [build-backend]
      - build-client:
          filters:
            branches:
              only: [main, dev]      
      - build-client-image:
          requires: [build-client]
      - publish-client-image:
          requires: [build-client-image]
      

